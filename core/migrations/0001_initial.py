# -*- coding: utf-8 -*-
# Generated by Django 1.11.2 on 2017-06-17 16:04
from __future__ import unicode_literals

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('django_base', '0002_adminlog'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ActiveEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('TEXT', '文本'), ('IMAGE', '图片'), ('VIDEO', '视频'), ('AUDIO', '音频'), ('COMBO', '混合'), ('OBJECT', '对象'), ('PROMPT', '提示')], default='TEXT', max_length=20, verbose_name='消息类型')),
                ('content', models.TextField(blank=True, default='', verbose_name='内容')),
                ('params', models.TextField(blank=True, default='', help_text='用 json 存放一些动态的参数', verbose_name='参数')),
                ('audios', models.ManyToManyField(blank=True, related_name='activeevents', to='django_base.AudioModel', verbose_name='音频')),
            ],
            options={
                'verbose_name_plural': '个人动态',
                'verbose_name': '个人动态',
                'db_table': 'core_active_event',
            },
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=255, verbose_name='名称')),
                ('is_del', models.BooleanField(default=False, verbose_name='已删除')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否有效')),
                ('is_sticky', models.BooleanField(default=False, verbose_name='是否置顶')),
                ('sorting', models.SmallIntegerField(default=0, help_text='数字越大越靠前', verbose_name='排序')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('content', models.TextField(blank=True, default='', verbose_name='内容')),
                ('rules', models.TextField(blank=True, default='', help_text='存放规则的JSON', verbose_name='规则参数')),
                ('date_begin', models.DateTimeField(verbose_name='开始时间')),
                ('date_end', models.DateTimeField(verbose_name='结束时间')),
                ('thumbnail', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='activity', to='django_base.ImageModel', verbose_name='活动海报')),
            ],
            options={
                'verbose_name_plural': '活动',
                'verbose_name': '活动',
                'db_table': 'core_activity',
            },
        ),
        migrations.CreateModel(
            name='ActivityParticipation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('ACTIVE', '进行中'), ('EXPIRED', '超时未达成'), ('ACTIVE', '完成')], default='ACTIVE', max_length=20, verbose_name='参与状态')),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participations', to='core.Activity', verbose_name='活动')),
            ],
            options={
                'verbose_name_plural': '活动参与记录',
                'verbose_name': '活动参与记录',
                'db_table': 'core_activity_participation',
            },
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=255, verbose_name='名称')),
                ('is_del', models.BooleanField(default=False, verbose_name='已删除')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否有效')),
                ('is_sticky', models.BooleanField(default=False, verbose_name='是否置顶')),
                ('sorting', models.SmallIntegerField(default=0, help_text='数字越大越靠前', verbose_name='排序')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('validity', models.IntegerField(default=0, verbose_name='有效期天数')),
                ('date_from', models.DateTimeField(blank=True, null=True, verbose_name='起始可用时间')),
                ('date_to', models.DateTimeField(blank=True, null=True, verbose_name='结束可用时间')),
                ('item_key', models.CharField(blank=True, default='根据后台指定的几种任务元件的编号', max_length=20, verbose_name='元件序号')),
                ('item_value', models.IntegerField(blank=True, default=0, help_text='指定条件达到所需的数值', verbose_name='元件数值')),
            ],
            options={
                'verbose_name_plural': '徽章',
                'verbose_name': '徽章',
                'db_table': 'core_badge',
            },
        ),
        migrations.CreateModel(
            name='Banner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(blank=True, default='', help_text='可以是直接链接或者JSON类型的路由描述', max_length=255, verbose_name='跳转链接')),
                ('remark', models.TextField(blank=True, default='', verbose_name='备注')),
                ('sorting', models.SmallIntegerField(default=0, help_text='数字越小越靠前', verbose_name='轮播次序')),
                ('subject', models.CharField(blank=True, default='', max_length=20, verbose_name='主题')),
                ('image', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='banner', to='django_base.ImageModel', verbose_name='图片')),
            ],
            options={
                'verbose_name_plural': '节目Banner',
                'verbose_name': '节目Banner',
                'db_table': 'core_banner',
            },
        ),
        migrations.CreateModel(
            name='CelebrityCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=255, verbose_name='名称')),
                ('is_del', models.BooleanField(default=False, verbose_name='已删除')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否有效')),
                ('is_sticky', models.BooleanField(default=False, verbose_name='是否置顶')),
                ('sorting', models.SmallIntegerField(default=0, help_text='数字越大越靠前', verbose_name='排序')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
            ],
            options={
                'verbose_name_plural': '众星云集分类',
                'verbose_name': '众星云集分类',
                'db_table': 'core_celebrity_category',
            },
        ),
        migrations.CreateModel(
            name='CreditCoinTransaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=18, verbose_name='金额')),
                ('remark', models.CharField(blank=True, default='', max_length=255, verbose_name='备注')),
            ],
            options={
                'verbose_name_plural': ('金币流水',),
                'verbose_name': ('金币流水',),
                'db_table': 'core_credit_coin_transaction',
            },
        ),
        migrations.CreateModel(
            name='CreditDiamondTransaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=18, verbose_name='金额')),
                ('remark', models.CharField(blank=True, default='', max_length=255, verbose_name='备注')),
                ('type', models.CharField(choices=[('LIVE_GIFT', '直播赠送')], max_length=20, verbose_name='流水类型')),
            ],
            options={
                'verbose_name_plural': ('钻石流水',),
                'verbose_name': ('钻石流水',),
                'db_table': 'core_credit_diamond_transaction',
            },
        ),
        migrations.CreateModel(
            name='CreditStarIndexTransaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=18, verbose_name='金额')),
                ('remark', models.CharField(blank=True, default='', max_length=255, verbose_name='备注')),
            ],
            options={
                'verbose_name_plural': ('星光指数流水',),
                'verbose_name': ('星光指数流水',),
                'db_table': 'core_credit_star_index_transaction',
            },
        ),
        migrations.CreateModel(
            name='CreditStarTransaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=18, verbose_name='金额')),
                ('remark', models.CharField(blank=True, default='', max_length=255, verbose_name='备注')),
            ],
            options={
                'verbose_name_plural': ('星星流水',),
                'verbose_name': ('星星流水',),
                'db_table': 'core_credit_star_transaction',
            },
        ),
        migrations.CreateModel(
            name='DailyCheckInLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='签到时间')),
            ],
            options={
                'verbose_name_plural': ('每日签到',),
                'verbose_name': ('每日签到',),
                'db_table': 'core_daily_check_in_log',
            },
        ),
        migrations.CreateModel(
            name='DiamondExchangeRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='兑换时间')),
                ('diamond_count', models.IntegerField(verbose_name='兑换的钻石数量')),
                ('coins_count', models.IntegerField(verbose_name='兑换的金币数量')),
            ],
            options={
                'verbose_name_plural': '钻石兑换记录',
                'verbose_name': '钻石兑换记录',
                'db_table': 'core_diamond_exchange_record',
            },
        ),
        migrations.CreateModel(
            name='ExtraPrize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=255, verbose_name='名称')),
                ('is_del', models.BooleanField(default=False, verbose_name='已删除')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否有效')),
                ('is_sticky', models.BooleanField(default=False, verbose_name='是否置顶')),
                ('sorting', models.SmallIntegerField(default=0, help_text='数字越大越靠前', verbose_name='排序')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('required_amount', models.IntegerField(verbose_name='需要的单日金币消费额')),
            ],
            options={
                'verbose_name_plural': '附赠礼物',
                'verbose_name': '附赠礼物',
                'db_table': 'core_extra_prize',
            },
        ),
        migrations.CreateModel(
            name='Family',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=255, verbose_name='名称')),
                ('is_del', models.BooleanField(default=False, verbose_name='已删除')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否有效')),
                ('is_sticky', models.BooleanField(default=False, verbose_name='是否置顶')),
                ('sorting', models.SmallIntegerField(default=0, help_text='数字越大越靠前', verbose_name='排序')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('mission_unlock_duration', models.IntegerField(default=0, help_text='后台设置的家族发布任务时间间隔（秒），发布了任务之后距离下个任务之间需要间隔这个时间', verbose_name='发布任务时间间隔')),
                ('mission_element_settings', models.TextField(blank=True, default='', help_text='JSON字段，后台设定设定各类任务元件的开关以及数量，逻辑需要额外定义，前端做对应的实现', verbose_name='任务元件设置')),
                ('award_element_settings', models.TextField(blank=True, default='', help_text='JSON字段，后台设定设定各类奖励元件的开关以及数量，逻辑需要额外定义，前端做对应的实现', verbose_name='奖励元件设置')),
                ('level_settings', models.TextField(blank=True, default='', help_text='JSON字段，后台设定设定家族等级规则，包括等级分段、所需贡献值以及颜色逻辑需要额外定义，前端做对应的实现', verbose_name='家族等级设定')),
                ('date_mission_unlock', models.DateTimeField(default=datetime.datetime(1900, 1, 1, 0, 0), verbose_name='发布任务解锁日期')),
            ],
            options={
                'verbose_name_plural': '家族',
                'verbose_name': '家族',
                'db_table': 'core_family',
            },
        ),
        migrations.CreateModel(
            name='FamilyArticle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=255, verbose_name='名称')),
                ('is_del', models.BooleanField(default=False, verbose_name='已删除')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否有效')),
                ('is_sticky', models.BooleanField(default=False, verbose_name='是否置顶')),
                ('sorting', models.SmallIntegerField(default=0, help_text='数字越大越靠前', verbose_name='排序')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
            ],
            options={
                'verbose_name_plural': '家族文章',
                'verbose_name': '家族文章',
                'db_table': 'core_family_article',
            },
        ),
        migrations.CreateModel(
            name='FamilyMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='称号')),
                ('join_message', models.CharField(help_text='用户在申请加入家族的时候填写的信息', max_length=255, verbose_name='加入信息')),
                ('status', models.CharField(choices=[('PENDING', '等待审批'), ('REJECTED', '被拒绝'), ('APPROVED', '已通过'), ('BLACKLISTED', '黑名单')], max_length=20, verbose_name='是否审批通过')),
                ('role', models.CharField(choices=[('MASTER', '族长'), ('ADMIN', '管理员'), ('NORMAL', '平民')], default='NORMAL', max_length=20, verbose_name='角色')),
            ],
            options={
                'verbose_name_plural': '家族成员',
                'verbose_name': '家族成员',
                'db_table': 'core_family_member',
            },
        ),
        migrations.CreateModel(
            name='FamilyMission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=255, verbose_name='名称')),
                ('is_del', models.BooleanField(default=False, verbose_name='已删除')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否有效')),
                ('is_sticky', models.BooleanField(default=False, verbose_name='是否置顶')),
                ('sorting', models.SmallIntegerField(default=0, help_text='数字越大越靠前', verbose_name='排序')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
            ],
            options={
                'verbose_name_plural': '家族任务',
                'verbose_name': '家族任务',
                'db_table': 'core_family_mission',
            },
        ),
        migrations.CreateModel(
            name='FamilyMissionAchievement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': '家族任务成就',
                'verbose_name': '家族任务成就',
                'db_table': 'core_family_mission_achievement',
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('TEXT', '文本'), ('IMAGE', '图片'), ('VIDEO', '视频'), ('AUDIO', '音频'), ('COMBO', '混合'), ('OBJECT', '对象'), ('PROMPT', '提示')], default='TEXT', max_length=20, verbose_name='消息类型')),
                ('content', models.TextField(blank=True, default='', verbose_name='内容')),
                ('params', models.TextField(blank=True, default='', help_text='用 json 存放一些动态的参数', verbose_name='参数')),
                ('excerpt', models.CharField(blank=True, default='', max_length=150, verbose_name='摘要')),
                ('is_done', models.BooleanField(default=False, verbose_name='是否处理')),
                ('audios', models.ManyToManyField(blank=True, related_name='feedbacks', to='django_base.AudioModel', verbose_name='音频')),
            ],
            options={
                'verbose_name_plural': '反馈',
                'verbose_name': '反馈',
                'db_table': 'core_feedback',
            },
        ),
        migrations.CreateModel(
            name='Inform',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=255, verbose_name='名称')),
                ('is_del', models.BooleanField(default=False, verbose_name='已删除')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否有效')),
                ('is_sticky', models.BooleanField(default=False, verbose_name='是否置顶')),
                ('sorting', models.SmallIntegerField(default=0, help_text='数字越大越靠前', verbose_name='排序')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('status', models.CharField(choices=[('PENDING', '等待处理'), ('SUCCESS', '举报成功'), ('FAIL', '举报失败')], default='PENDING', max_length=20, verbose_name='状态')),
                ('excerpt', models.CharField(blank=True, default='', max_length=150, verbose_name='摘要')),
                ('inform_type', models.CharField(blank=True, default='', max_length=50, verbose_name='举报类型')),
                ('reason', models.TextField(blank=True, default='', verbose_name='举报内容')),
            ],
            options={
                'verbose_name_plural': '举报',
                'verbose_name': '举报',
                'db_table': 'core_inform',
            },
        ),
        migrations.CreateModel(
            name='LevelOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': ('等级设定',),
                'verbose_name': ('等级设定',),
                'db_table': 'core_level_option',
            },
        ),
        migrations.CreateModel(
            name='Live',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=255, verbose_name='名称')),
                ('is_del', models.BooleanField(default=False, verbose_name='已删除')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否有效')),
                ('is_sticky', models.BooleanField(default=False, verbose_name='是否置顶')),
                ('sorting', models.SmallIntegerField(default=0, help_text='数字越大越靠前', verbose_name='排序')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('geo_lng', models.FloatField(blank=True, default=0, verbose_name='经度')),
                ('geo_lat', models.FloatField(blank=True, default=0, verbose_name='纬度')),
                ('radius', models.FloatField(blank=True, default=0, verbose_name='半径')),
                ('geo_label', models.CharField(blank=True, default='', max_length=255, verbose_name='位置标签')),
                ('adcode', models.IntegerField(default=0, help_text='保存时试图自动获取区划编码', verbose_name='行政区划编码')),
                ('geo_info', models.TextField(blank=True, default='', help_text='保存时自动尝试获取地理信息', verbose_name='地理信息')),
                ('quota', models.IntegerField(default=0, help_text='上限观众人数，0为不做限制', verbose_name='上限观众人数')),
                ('password', models.CharField(max_length=45, verbose_name='房间密码')),
                ('date_end', models.DateTimeField(blank=True, null=True, verbose_name='结束时间')),
                ('push_url', models.URLField(verbose_name='推流地址')),
                ('is_private', models.BooleanField(default=False, help_text='如果设置隐藏，将不能在外部列表查询到此直播', verbose_name='是否隐藏')),
                ('is_free', models.BooleanField(default=True, verbose_name='是否免费')),
                ('hot_rating', models.IntegerField(default=0, verbose_name='热门指数')),
            ],
            options={
                'verbose_name_plural': '直播',
                'verbose_name': '直播',
                'db_table': 'core_live',
            },
        ),
        migrations.CreateModel(
            name='LiveBarrage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('TEXT', '文本'), ('IMAGE', '图片'), ('VIDEO', '视频'), ('AUDIO', '音频'), ('COMBO', '混合'), ('OBJECT', '对象'), ('PROMPT', '提示')], default='TEXT', max_length=20, verbose_name='消息类型')),
                ('content', models.TextField(blank=True, default='', verbose_name='内容')),
                ('params', models.TextField(blank=True, default='', help_text='用 json 存放一些动态的参数', verbose_name='参数')),
                ('date_sent', models.DateTimeField(auto_now_add=True, verbose_name='发送时间')),
                ('audios', models.ManyToManyField(blank=True, related_name='livebarrages', to='django_base.AudioModel', verbose_name='音频')),
            ],
            options={
                'verbose_name_plural': '直播弹幕',
                'verbose_name': '直播弹幕',
                'db_table': 'core_live_barrage',
            },
        ),
        migrations.CreateModel(
            name='LiveCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=255, verbose_name='名称')),
                ('is_del', models.BooleanField(default=False, verbose_name='已删除')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否有效')),
                ('is_sticky', models.BooleanField(default=False, verbose_name='是否置顶')),
                ('sorting', models.SmallIntegerField(default=0, help_text='数字越大越靠前', verbose_name='排序')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
            ],
            options={
                'verbose_name_plural': '直播分类',
                'verbose_name': '直播分类',
                'db_table': 'core_live_category',
            },
        ),
        migrations.CreateModel(
            name='LiveWatchLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_enter', models.DateTimeField(verbose_name='进入时间')),
                ('date_leave', models.DateTimeField(verbose_name='退出时间')),
            ],
            options={
                'verbose_name_plural': '直播观看记录',
                'verbose_name': '直播观看记录',
                'db_table': 'core_live_watch_log',
            },
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('name', models.CharField(blank=True, default='', max_length=255, verbose_name='名称')),
                ('is_del', models.BooleanField(default=False, verbose_name='已删除')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否有效')),
                ('is_sticky', models.BooleanField(default=False, verbose_name='是否置顶')),
                ('sorting', models.SmallIntegerField(default=0, help_text='数字越大越靠前', verbose_name='排序')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('geo_lng', models.FloatField(blank=True, default=0, verbose_name='经度')),
                ('geo_lat', models.FloatField(blank=True, default=0, verbose_name='纬度')),
                ('radius', models.FloatField(blank=True, default=0, verbose_name='半径')),
                ('geo_label', models.CharField(blank=True, default='', max_length=255, verbose_name='位置标签')),
                ('adcode', models.IntegerField(default=0, help_text='保存时试图自动获取区划编码', verbose_name='行政区划编码')),
                ('geo_info', models.TextField(blank=True, default='', help_text='保存时自动尝试获取地理信息', verbose_name='地理信息')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='member', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
                ('nickname', models.CharField(blank=True, default='', max_length=255, verbose_name='昵称')),
                ('nickname_pinyin', models.CharField(blank=True, default='', max_length=255, verbose_name='昵称拼音')),
                ('gender', models.CharField(blank=True, choices=[('', '保密'), ('M', '男'), ('F', '女')], default='', max_length=1, verbose_name='性别')),
                ('real_name', models.CharField(blank=True, default='', max_length=150, verbose_name='真实姓名')),
                ('mobile', models.CharField(max_length=45, unique=True, verbose_name='手机号码')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='生日')),
                ('age', models.IntegerField(default=0, help_text='如果为0则根据birthday判定年龄，否则使用此数字作为年龄', verbose_name='年龄')),
                ('search_history', models.TextField(blank=True, help_text='最近10次搜索历史，逗号分隔', null=True, verbose_name='搜索历史')),
                ('signature', models.TextField(blank=True, null=True, verbose_name='个性签名')),
                ('address', models.TextField(blank=True, default='', verbose_name='详细地址')),
                ('session_key', models.CharField(blank=True, default='', help_text='用于区分单用例登录', max_length=255, verbose_name='session_key')),
                ('constellation', models.CharField(blank=True, choices=[('ARIES', '白羊座'), ('TAURUS', '金牛座'), ('GEMINI', '双子座'), ('CANCER', '巨蟹座'), ('LEO', '狮子座'), ('VIRGO', '处女座'), ('LIBRA', '天秤座'), ('SCORPIO', '天蝎座'), ('SAGITTARIUS', '射手座'), ('CAPRICORN', '摩羯座'), ('AQUARIUS', '水瓶座'), ('PISCES', '双鱼座')], default='', max_length=45, verbose_name='星座')),
                ('is_withdraw_blacklisted', models.BooleanField(default=False, verbose_name='是否已列入提现黑名单')),
                ('is_new_recommended', models.BooleanField(default=False, verbose_name='是否为首次登陆推荐名单')),
                ('is_follow_recommended', models.BooleanField(default=False, verbose_name='是否为首页追踪推荐名单')),
                ('avatar', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='member', to='django_base.ImageModel', verbose_name='头像')),
            ],
            options={
                'verbose_name_plural': '会员',
                'verbose_name': '会员',
                'db_table': 'core_member',
            },
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=255, verbose_name='名称')),
                ('is_del', models.BooleanField(default=False, verbose_name='已删除')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否有效')),
                ('is_sticky', models.BooleanField(default=False, verbose_name='是否置顶')),
                ('sorting', models.SmallIntegerField(default=0, help_text='数字越大越靠前', verbose_name='排序')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('embed_link', models.URLField(verbose_name='嵌入链接')),
                ('tag_name', models.CharField(blank=True, default='', max_length=100, verbose_name='标签名称')),
                ('tag_color', models.CharField(default='#FF0000', max_length=20, verbose_name='标签颜色')),
                ('category', models.CharField(blank=True, choices=[('HOT', '热门视频'), ('SPECIAL', '特辑视频')], default='', max_length=20, verbose_name='影片分类')),
            ],
            options={
                'verbose_name_plural': '影片节目',
                'verbose_name': '影片节目',
                'db_table': 'core_movie',
            },
        ),
        migrations.CreateModel(
            name='Notifications',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': '通知',
                'verbose_name': '通知',
                'db_table': 'core_notification',
            },
        ),
        migrations.CreateModel(
            name='Prize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=255, verbose_name='名称')),
                ('is_del', models.BooleanField(default=False, verbose_name='已删除')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否有效')),
                ('is_sticky', models.BooleanField(default=False, verbose_name='是否置顶')),
                ('sorting', models.SmallIntegerField(default=0, help_text='数字越大越靠前', verbose_name='排序')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('date_sticker_begin', models.DateTimeField(blank=True, null=True, verbose_name='表情包有效期开始')),
                ('date_sticker_end', models.DateTimeField(blank=True, null=True, verbose_name='表情包有效期结束')),
                ('price', models.IntegerField(default=0, verbose_name='价格（金币）')),
                ('marquee_size', models.CharField(choices=[('BIG', '大'), ('SMALL', '小')], default='SMALL', max_length=20, verbose_name='跑马灯大小')),
            ],
            options={
                'verbose_name_plural': '礼物',
                'verbose_name': '礼物',
                'db_table': 'core_prize',
            },
        ),
        migrations.CreateModel(
            name='PrizeCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=255, verbose_name='名称')),
                ('is_del', models.BooleanField(default=False, verbose_name='已删除')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否有效')),
                ('is_sticky', models.BooleanField(default=False, verbose_name='是否置顶')),
                ('sorting', models.SmallIntegerField(default=0, help_text='数字越大越靠前', verbose_name='排序')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
            ],
            options={
                'verbose_name_plural': '礼物分类',
                'verbose_name': '礼物分类',
                'db_table': 'core_prize_category',
            },
        ),
        migrations.CreateModel(
            name='PrizeOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name_plural': '礼物订单',
                'verbose_name': '礼物订单',
                'db_table': 'core_prize_order',
            },
        ),
        migrations.CreateModel(
            name='PrizeTransition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=18, verbose_name='金额')),
                ('remark', models.CharField(blank=True, default='', max_length=255, verbose_name='备注')),
                ('prize', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transitions', to='core.Prize', verbose_name='礼物')),
            ],
            options={
                'verbose_name_plural': '礼物记录',
                'verbose_name': '礼物记录',
                'db_table': 'core_prize_transition',
            },
        ),
        migrations.CreateModel(
            name='RedBagRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': '红包记录',
                'verbose_name': '红包记录',
                'db_table': 'core_red_bag_record',
            },
        ),
        migrations.CreateModel(
            name='Robot',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='robot', serialize=False, to=settings.AUTH_USER_MODEL, verbose_name='用户')),
                ('count_friend', models.IntegerField(default=0, verbose_name='好友数')),
                ('count_follow', models.IntegerField(default=0, verbose_name='追踪数')),
                ('count_live', models.IntegerField(default=0, verbose_name='发起直播数')),
                ('count_diamond', models.IntegerField(default=0, verbose_name='钻石数')),
                ('count_prize_sent', models.IntegerField(default=0, verbose_name='送出礼物数')),
            ],
            options={
                'verbose_name_plural': '机器人',
                'verbose_name': '机器人',
                'db_table': 'core_robot',
            },
        ),
        migrations.CreateModel(
            name='SensitiveWord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=255, verbose_name='文本')),
            ],
            options={
                'verbose_name_plural': '敏感词',
                'verbose_name': '敏感词',
                'db_table': 'core_sensitive_word',
            },
        ),
        migrations.CreateModel(
            name='StarBox',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=255, verbose_name='名称')),
                ('is_del', models.BooleanField(default=False, verbose_name='已删除')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否有效')),
                ('is_sticky', models.BooleanField(default=False, verbose_name='是否置顶')),
                ('sorting', models.SmallIntegerField(default=0, help_text='数字越大越靠前', verbose_name='排序')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
            ],
            options={
                'verbose_name_plural': '星光宝盒',
                'verbose_name': '星光宝盒',
                'db_table': 'core_star_box',
            },
        ),
        migrations.CreateModel(
            name='StarBoxRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='获得时间')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='starboxrecords_owned', to=settings.AUTH_USER_MODEL, verbose_name='作者')),
                ('live', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='star_box_records', to='core.Live', verbose_name='直播')),
                ('star_box', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='records', to='core.StarBox', verbose_name='星光宝盒')),
            ],
            options={
                'verbose_name_plural': '星光宝盒记录',
                'verbose_name': '星光宝盒记录',
                'db_table': 'core_star_box_record',
            },
        ),
        migrations.CreateModel(
            name='StarMissionAchievement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('WATCH', '观看直播30分钟'), ('SHARE', '分享直播间'), ('INVITE', '邀请好友'), ('INFORMATION', '完善个人资料')], max_length=20, verbose_name='任务类型')),
                ('points', models.IntegerField(default=0, verbose_name='获得星光点数')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='starmissionachievements_owned', to=settings.AUTH_USER_MODEL, verbose_name='作者')),
            ],
            options={
                'verbose_name_plural': '星光任务成果',
                'verbose_name': '星光任务成果',
                'db_table': 'core_star_mission_achievement',
            },
        ),
        migrations.CreateModel(
            name='StatisticRule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=255, verbose_name='名称')),
                ('is_del', models.BooleanField(default=False, verbose_name='已删除')),
                ('is_active', models.BooleanField(default=True, verbose_name='是否有效')),
                ('is_sticky', models.BooleanField(default=False, verbose_name='是否置顶')),
                ('sorting', models.SmallIntegerField(default=0, help_text='数字越大越靠前', verbose_name='排序')),
                ('date_created', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('date_updated', models.DateTimeField(auto_now=True, verbose_name='修改时间')),
                ('date_begin', models.DateTimeField(verbose_name='开始时间')),
                ('date_end', models.DateTimeField(verbose_name='结束时间')),
            ],
            options={
                'verbose_name_plural': '统计规则',
                'verbose_name': '统计规则',
                'db_table': 'core_rule',
            },
        ),
        migrations.CreateModel(
            name='VisitLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('geo_lng', models.FloatField(blank=True, default=0, verbose_name='经度')),
                ('geo_lat', models.FloatField(blank=True, default=0, verbose_name='纬度')),
                ('radius', models.FloatField(blank=True, default=0, verbose_name='半径')),
                ('geo_label', models.CharField(blank=True, default='', max_length=255, verbose_name='位置标签')),
                ('adcode', models.IntegerField(default=0, help_text='保存时试图自动获取区划编码', verbose_name='行政区划编码')),
                ('geo_info', models.TextField(blank=True, default='', help_text='保存时自动尝试获取地理信息', verbose_name='地理信息')),
                ('date_last_visit', models.DateTimeField(auto_now=True, verbose_name='最后访问时间')),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='visitlogs_owned', to=settings.AUTH_USER_MODEL, verbose_name='作者')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visit_logs', to=settings.AUTH_USER_MODEL, verbose_name='被访问用户')),
            ],
            options={
                'verbose_name_plural': '访客记录',
                'verbose_name': '访客记录',
                'db_table': 'core_visit_log',
            },
        ),
        migrations.AddField(
            model_name='redbagrecord',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='redbagrecords_owned', to=settings.AUTH_USER_MODEL, verbose_name='作者'),
        ),
        migrations.AddField(
            model_name='redbagrecord',
            name='live',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='red_bag_records', to='core.Live', verbose_name='直播'),
        ),
        migrations.AddField(
            model_name='prizetransition',
            name='user_credit',
            field=models.ForeignKey(blank=True, help_text='即余额减少的用户', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prizetransitions_credit', to=settings.AUTH_USER_MODEL, verbose_name='贷方用户'),
        ),
        migrations.AddField(
            model_name='prizetransition',
            name='user_debit',
            field=models.ForeignKey(blank=True, help_text='即余额增加的用户', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prizetransitions_debit', to=settings.AUTH_USER_MODEL, verbose_name='借方用户'),
        ),
        migrations.AddField(
            model_name='prizeorder',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prizeorders_owned', to=settings.AUTH_USER_MODEL, verbose_name='作者'),
        ),
        migrations.AddField(
            model_name='prizeorder',
            name='live_watch_log',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prize_orders', to='core.LiveWatchLog', verbose_name='观看记录'),
        ),
        migrations.AddField(
            model_name='prizeorder',
            name='prize',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='core.Prize', verbose_name='礼物'),
        ),
        migrations.AddField(
            model_name='prizeorder',
            name='prize_transition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='core.PrizeTransition', verbose_name='礼物记录'),
        ),
        migrations.AddField(
            model_name='prize',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prizes', to='core.PrizeCategory', verbose_name='礼物分类'),
        ),
        migrations.AddField(
            model_name='prize',
            name='icon',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='prize_as_icon', to='django_base.ImageModel', verbose_name='图标'),
        ),
        migrations.AddField(
            model_name='prize',
            name='stickers',
            field=models.ManyToManyField(blank=True, related_name='prizes_as_stickers', to='django_base.ImageModel', verbose_name='表情包'),
        ),
        migrations.AddField(
            model_name='notifications',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notificationss_owned', to=settings.AUTH_USER_MODEL, verbose_name='作者'),
        ),
        migrations.AddField(
            model_name='movie',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='movies_owned', to=settings.AUTH_USER_MODEL, verbose_name='作者'),
        ),
        migrations.AddField(
            model_name='movie',
            name='thumbnail',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='movie', to='django_base.ImageModel', verbose_name='封面图片'),
        ),
        migrations.AddField(
            model_name='member',
            name='referrer',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='referrals', to=settings.AUTH_USER_MODEL, verbose_name='推荐人'),
        ),
        migrations.AddField(
            model_name='member',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='members', to='django_base.Tag', verbose_name='标签'),
        ),
        migrations.AddField(
            model_name='livewatchlog',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='livewatchlogs_owned', to=settings.AUTH_USER_MODEL, verbose_name='作者'),
        ),
        migrations.AddField(
            model_name='livewatchlog',
            name='comments',
            field=models.ManyToManyField(blank=True, related_name='livewatchlogs', to='django_base.Comment', verbose_name='评论'),
        ),
        migrations.AddField(
            model_name='livewatchlog',
            name='live',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='watch_logs', to='core.Live', verbose_name='直播'),
        ),
        migrations.AddField(
            model_name='livebarrage',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='livebarrages_owned', to=settings.AUTH_USER_MODEL, verbose_name='作者'),
        ),
        migrations.AddField(
            model_name='livebarrage',
            name='images',
            field=models.ManyToManyField(blank=True, related_name='livebarrages', to='django_base.ImageModel', verbose_name='图片'),
        ),
        migrations.AddField(
            model_name='livebarrage',
            name='live',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='barrages', to='core.Live', verbose_name='直播'),
        ),
        migrations.AddField(
            model_name='livebarrage',
            name='videos',
            field=models.ManyToManyField(blank=True, related_name='livebarrages', to='django_base.VideoModel', verbose_name='视频'),
        ),
        migrations.AddField(
            model_name='live',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lives_owned', to=settings.AUTH_USER_MODEL, verbose_name='作者'),
        ),
        migrations.AddField(
            model_name='live',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.LiveCategory', verbose_name='直播分类'),
        ),
        migrations.AddField(
            model_name='live',
            name='comments',
            field=models.ManyToManyField(blank=True, related_name='lives', to='django_base.Comment', verbose_name='评论'),
        ),
        migrations.AddField(
            model_name='live',
            name='informs',
            field=models.ManyToManyField(blank=True, related_name='lives', to='core.Inform', verbose_name='举报信息'),
        ),
        migrations.AddField(
            model_name='inform',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='informs_owned', to=settings.AUTH_USER_MODEL, verbose_name='作者'),
        ),
        migrations.AddField(
            model_name='inform',
            name='images',
            field=models.ManyToManyField(blank=True, related_name='informs', to='django_base.ImageModel', verbose_name='图片'),
        ),
        migrations.AddField(
            model_name='feedback',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks_owned', to=settings.AUTH_USER_MODEL, verbose_name='作者'),
        ),
        migrations.AddField(
            model_name='feedback',
            name='images',
            field=models.ManyToManyField(blank=True, related_name='feedbacks', to='django_base.ImageModel', verbose_name='图片'),
        ),
        migrations.AddField(
            model_name='feedback',
            name='videos',
            field=models.ManyToManyField(blank=True, related_name='feedbacks', to='django_base.VideoModel', verbose_name='视频'),
        ),
        migrations.AddField(
            model_name='familymissionachievement',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='familymissionachievements_owned', to=settings.AUTH_USER_MODEL, verbose_name='作者'),
        ),
        migrations.AddField(
            model_name='familymissionachievement',
            name='mission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to='core.FamilyMission', verbose_name='任务'),
        ),
        migrations.AddField(
            model_name='familymission',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='familymissions_owned', to=settings.AUTH_USER_MODEL, verbose_name='作者'),
        ),
        migrations.AddField(
            model_name='familymission',
            name='family',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='missions', to='core.Family', verbose_name='家族'),
        ),
        migrations.AddField(
            model_name='familymember',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='familymembers_owned', to=settings.AUTH_USER_MODEL, verbose_name='作者'),
        ),
        migrations.AddField(
            model_name='familymember',
            name='family',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='core.Family', verbose_name='家族'),
        ),
        migrations.AddField(
            model_name='familyarticle',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='familyarticles_owned', to=settings.AUTH_USER_MODEL, verbose_name='作者'),
        ),
        migrations.AddField(
            model_name='familyarticle',
            name='family',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='articles', to='core.Family', verbose_name='家族'),
        ),
        migrations.AddField(
            model_name='family',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='familys_owned', to=settings.AUTH_USER_MODEL, verbose_name='作者'),
        ),
        migrations.AddField(
            model_name='family',
            name='logo',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='family', to='django_base.ImageModel', verbose_name='图标'),
        ),
        migrations.AddField(
            model_name='family',
            name='messages',
            field=models.ManyToManyField(related_name='families', to='django_base.Message', verbose_name='家族消息'),
        ),
        migrations.AddField(
            model_name='family',
            name='users',
            field=models.ManyToManyField(related_name='families', through='core.FamilyMember', to=settings.AUTH_USER_MODEL, verbose_name='家族成员'),
        ),
        migrations.AddField(
            model_name='extraprize',
            name='prize',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='extra_prizes', to='core.Prize', verbose_name='礼物'),
        ),
        migrations.AddField(
            model_name='extraprize',
            name='wallpaper',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='extra_prize_as_wallpaper', to='django_base.ImageModel', verbose_name='壁纸'),
        ),
        migrations.AddField(
            model_name='diamondexchangerecord',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='diamondexchangerecords_owned', to=settings.AUTH_USER_MODEL, verbose_name='作者'),
        ),
        migrations.AddField(
            model_name='diamondexchangerecord',
            name='coin_transaction',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='diamond_exchange_record', to='core.CreditCoinTransaction', verbose_name='金币交易流水'),
        ),
        migrations.AddField(
            model_name='diamondexchangerecord',
            name='diamond_transaction',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='diamond_exchange_record', to='core.CreditDiamondTransaction', verbose_name='钻石交易流水'),
        ),
        migrations.AddField(
            model_name='dailycheckinlog',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dailycheckinlogs_owned', to=settings.AUTH_USER_MODEL, verbose_name='作者'),
        ),
        migrations.AddField(
            model_name='dailycheckinlog',
            name='prize_star_transaction',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.CreditStarTransaction', verbose_name='奖励星星流水记录'),
        ),
        migrations.AddField(
            model_name='creditstartransaction',
            name='user_credit',
            field=models.ForeignKey(blank=True, help_text='即余额减少的用户', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='creditstartransactions_credit', to=settings.AUTH_USER_MODEL, verbose_name='贷方用户'),
        ),
        migrations.AddField(
            model_name='creditstartransaction',
            name='user_debit',
            field=models.ForeignKey(blank=True, help_text='即余额增加的用户', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='creditstartransactions_debit', to=settings.AUTH_USER_MODEL, verbose_name='借方用户'),
        ),
        migrations.AddField(
            model_name='creditstarindextransaction',
            name='user_credit',
            field=models.ForeignKey(blank=True, help_text='即余额减少的用户', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='creditstarindextransactions_credit', to=settings.AUTH_USER_MODEL, verbose_name='贷方用户'),
        ),
        migrations.AddField(
            model_name='creditstarindextransaction',
            name='user_debit',
            field=models.ForeignKey(blank=True, help_text='即余额增加的用户', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='creditstarindextransactions_debit', to=settings.AUTH_USER_MODEL, verbose_name='借方用户'),
        ),
        migrations.AddField(
            model_name='creditdiamondtransaction',
            name='live',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='diamond_transactions', to='core.Live', verbose_name='直播'),
        ),
        migrations.AddField(
            model_name='creditdiamondtransaction',
            name='live_watch_log',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='diamond_transactions', to='core.LiveWatchLog', verbose_name='直播参与记录'),
        ),
        migrations.AddField(
            model_name='creditdiamondtransaction',
            name='user_credit',
            field=models.ForeignKey(blank=True, help_text='即余额减少的用户', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='creditdiamondtransactions_credit', to=settings.AUTH_USER_MODEL, verbose_name='贷方用户'),
        ),
        migrations.AddField(
            model_name='creditdiamondtransaction',
            name='user_debit',
            field=models.ForeignKey(blank=True, help_text='即余额增加的用户', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='creditdiamondtransactions_debit', to=settings.AUTH_USER_MODEL, verbose_name='借方用户'),
        ),
        migrations.AddField(
            model_name='creditcointransaction',
            name='user_credit',
            field=models.ForeignKey(blank=True, help_text='即余额减少的用户', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='creditcointransactions_credit', to=settings.AUTH_USER_MODEL, verbose_name='贷方用户'),
        ),
        migrations.AddField(
            model_name='creditcointransaction',
            name='user_debit',
            field=models.ForeignKey(blank=True, help_text='即余额增加的用户', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='creditcointransactions_debit', to=settings.AUTH_USER_MODEL, verbose_name='借方用户'),
        ),
        migrations.AddField(
            model_name='celebritycategory',
            name='leader',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='celebrity_categories', to=settings.AUTH_USER_MODEL, verbose_name='当前获得者'),
        ),
        migrations.AddField(
            model_name='badge',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='badges_owned', to=settings.AUTH_USER_MODEL, verbose_name='作者'),
        ),
        migrations.AddField(
            model_name='badge',
            name='icon',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='badge', to='django_base.ImageModel', verbose_name='图标'),
        ),
        migrations.AddField(
            model_name='activityparticipation',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='activityparticipations_owned', to=settings.AUTH_USER_MODEL, verbose_name='作者'),
        ),
        migrations.AddField(
            model_name='activeevent',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='activeevents_owned', to=settings.AUTH_USER_MODEL, verbose_name='作者'),
        ),
        migrations.AddField(
            model_name='activeevent',
            name='comments',
            field=models.ManyToManyField(blank=True, related_name='activeevents', to='django_base.Comment', verbose_name='评论'),
        ),
        migrations.AddField(
            model_name='activeevent',
            name='images',
            field=models.ManyToManyField(blank=True, related_name='activeevents', to='django_base.ImageModel', verbose_name='图片'),
        ),
        migrations.AddField(
            model_name='activeevent',
            name='videos',
            field=models.ManyToManyField(blank=True, related_name='activeevents', to='django_base.VideoModel', verbose_name='视频'),
        ),
        migrations.AlterUniqueTogether(
            name='activityparticipation',
            unique_together=set([('activity', 'author')]),
        ),
    ]
